import java.util.*; 
 
class Employee { 
    int id; 
    String name; 
    double salary; 
 
    Employee(int id, String name, double salary) { 
        this.id = id; 
        this.name = name; 
        this.salary = salary; 
    } 
 
    @Override 
    public String toString() { 
        return "ID: " + id + ", Name: " + name + ", Salary: " + salary; 
    } 
} 
 
public class EmployeeManagement { 
    static ArrayList<Employee> employees = new ArrayList<>(); 
    static Scanner scanner = new Scanner(System.in); 
 
    static void addEmployee() { 
        System.out.print("Enter ID: "); 
        int id = scanner.nextInt(); 
        scanner.nextLine();  // Consume the newline character 
        System.out.print("Enter Name: "); 
        String name = scanner.nextLine(); 
        System.out.print("Enter Salary: "); 
        double salary = scanner.nextDouble(); 
        employees.add(new Employee(id, name, salary)); 
        System.out.println("Employee added successfully!"); 
    } 
 
   
 
    static void updateEmployee() { 
        System.out.print("Enter Employee ID to update: "); 
        int id = scanner.nextInt(); 
        scanner.nextLine(); // Consume newline 
        boolean found = false; 
        for (Employee emp : employees) { 
            if (emp.id == id) { 
                System.out.print("Enter new Name: "); 
                emp.name = scanner.nextLine(); 
                System.out.print("Enter new Salary: "); 
                emp.salary = scanner.nextDouble(); 
                System.out.println("Employee updated successfully!"); 
                found = true; 
                break; 
            } 
        } 
        if (!found) { 
            System.out.println("Employee not found!"); 
        } 
    } 
 
    static void removeEmployee() { 
        System.out.print("Enter Employee ID to remove: "); 
        int id = scanner.nextInt(); 
        boolean removed = employees.removeIf(emp -> emp.id == id); 
        if (removed) { 
            System.out.println("Employee removed successfully!"); 
        } else { 
            System.out.println("Employee not found!"); 
        } 
    } 
 
    static void searchEmployee() { 
        System.out.print("Enter Employee ID to search: "); 
        int id = scanner.nextInt(); 
        boolean found = false; 
        for (Employee emp : employees) { 
            if (emp.id == id) { 
                System.out.println("Employee Found: " + emp); 
                found = true; 
                break; 
            } 
 
        } 
        if (!found) { 
            System.out.println("Employee not found!"); 
        } 
    } 
 
    static void displayEmployees() { 
        if (employees.isEmpty()) { 
            System.out.println("No employees found."); 
        } else { 
            System.out.println("\nEmployee List:"); 
            for (Employee emp : employees) { 
                System.out.println(emp); 
            } 
        } 
    } 
 
    public static void main(String[] args) { 
        while (true) { 
            System.out.println("\nEmployee Management System"); 
            System.out.println("1. Add Employee"); 
            System.out.println("2. Update Employee"); 
            System.out.println("3. Remove Employee"); 
            System.out.println("4. Search Employee"); 
            System.out.println("5. Display All Employees"); 
            System.out.println("6. Exit"); 
            System.out.print("Enter your choice: "); 
            int choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    addEmployee(); 
                    break; 
                case 2: 
                    updateEmployee(); 
                    break; 
                case 3: 
                    removeEmployee(); 
                    break; 
                case 4: 
                    searchEmployee(); 
                    break; 
 
                case 5: 
                    displayEmployees(); 
                    break; 
                case 6: 
                    System.out.println("Exiting the system. Goodbye!"); 
                    return; 
                default: 
                    System.out.println("Invalid choice. Please try again."); 
            } 
        } 
    } 
} 
 
b). Cards Code: 
  
import java.util.*; 
 
class Card { 
    String symbol; 
    int number; 
 
    Card(String symbol, int number) { 
        this.symbol = symbol; 
        this.number = number; 
    } 
 
    @Override 
    public String toString() { 
        return symbol + " " + number; 
    } 
} 
 
public class CardGame { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        Map<String, List<Card>> cardMap = new HashMap<>(); 
 
        System.out.print("Enter Number of Cards: "); 
        int n = scanner.nextInt(); 
        scanner.nextLine();  
 
        for (int i = 1; i <= n; i++) { 
 
            System.out.println("Enter card " + i + ":"); 
            String symbol = scanner.nextLine(); 
            int number = scanner.nextInt(); 
            scanner.nextLine(); 
 
            cardMap.putIfAbsent(symbol, new ArrayList<>()); 
            cardMap.get(symbol).add(new Card(symbol, number)); 
        } 
 
        List<String> symbols = new ArrayList<>(cardMap.keySet()); 
        Collections.sort(symbols); 
 
        System.out.println("\nDistinct Symbols are:"); 
        for (String symbol : symbols) { 
            System.out.print(symbol + " "); 
        } 
        System.out.println("\n"); 
 
           for (String symbol : symbols) {  
            List<Card> cards = cardMap.get(symbol); 
            int sum = 0; 
 
            System.out.println("Cards in " + symbol + " Symbol"); 
            for (Card card : cards) { 
                System.out.println(card); 
                sum += card.number; 
            } 
 
            System.out.println("Number of cards: " + cards.size()); 
            System.out.println("Sum of Numbers: " + sum); 
            System.out.println(); 
        } 
 
        scanner.close(); 
    } 
} 
 
         c). Ticket booking: 
              
          import java.util.*; 
 
          class TicketBookingSystem { 
 
        private final boolean[] seats; 
  
       public TicketBookingSystem(int totalSeats) { 
        seats = new boolean[totalSeats]; 
      } 
 
    public synchronized boolean bookSeat(int seatNumber, String customerName) 
{ 
        if (seatNumber < 0 || seatNumber >= seats.length) { 
            System.out.println(customerName + " tried to book an invalid seat."); 
            return false; 
        } 
        if (!seats[seatNumber]) { 
            seats[seatNumber] = true; 
            System.out.println(customerName + " successfully booked seat " +    
seatNumber); 
            return true; 
        } else { 
            System.out.println(customerName + " tried to book seat " + seatNumber + 
" but it's already taken."); 
            return false; 
        } 
    } 
 
    public int getTotalSeats() { 
        return seats.length; 
    } 
} 
 
class BookingThread extends Thread { 
    private final TicketBookingSystem system; 
    private final String customerName; 
    private final int seatNumber; 
 
    public BookingThread(TicketBookingSystem system, String customerName, 
int seatNumber, int priority) { 
        this.system = system; 
        this.customerName = customerName; 
        this.seatNumber = seatNumber; 
        setPriority(priority); 
    } 
 
 
    @Override 
    public void run() { 
        system.bookSeat(seatNumber, customerName); 
    } 
} 
 
public class TicketBookingApp { 
    public static void main(String[] args) { 
        TicketBookingSystem system = new TicketBookingSystem(10); // 10 seats 
available 
 
        List<Thread> bookingRequests = new ArrayList<>(); 
        bookingRequests.add(new BookingThread(system, "Abhishek (VIP)", 1, 
Thread.MAX_PRIORITY)); 
        bookingRequests.add(new BookingThread(system, "Sachin (VIP)", 3, 
Thread.MAX_PRIORITY)); 
        bookingRequests.add(new BookingThread(system, "Ansh (VIP)", 5, 
Thread.MAX_PRIORITY)); 
        bookingRequests.add(new BookingThread(system, "Naitik", 1, 
Thread.NORM_PRIORITY)); 
        bookingRequests.add(new BookingThread(system, "Shubham", 4, 
Thread.NORM_PRIORITY)); 
        bookingRequests.add(new BookingThread(system, "Mayank", 5, 
Thread.NORM_PRIORITY)); 
 
        Collections.shuffle(bookingRequests); 
 
        for (Thread t : bookingRequests) { 
            t.start(); 
        } 
         
        for (Thread t : bookingRequests) { 
            try { 
                t.join(); 
            } catch (InterruptedException e) { 
                e.printStackTrace(); 
            } 
        } 
 
        System.out.println("\nAll bookings completed!"); 
    } 
}
